<!DOCTYPE html>
<html>
<meta charset="utf-8">
<head>
  <title>Zoom + Pan within limits</title>
  <link rel="stylesheet" type="text/css" href="/css/main.css">
  <script src="https://bl.ocks.org/mhsmith/raw/5732011/d3-zoom-pan-extent.js"></script>
</head>
<body>
  <script type="text/javascript">


  (function(){

  // margins
  var margin = {top: 20, right: 20, bottom: 40, left: 50},
      width = window.innerWidth - margin.left - margin.right,  // 900 - 40 - 20 = 840
      height = window.innerHeight - margin.top - margin.bottom; // 500 - 20 - 30 = 450

  var x = d3.scale.linear().range([0, width]);

  var y = d3.scale.linear().range([height, 0]);


  d3.csv('/data/entire_data.csv', function(error, data) {
      data.forEach(function(d) {
        d.index = +d.index;
        d.signal = +d.signal;
        d.time = +d.time;
        d.length = +d.length;
        d.stdv = +d.stdv;
      });

      x.domain([ d3.min(data, function(d){ return d.index; }) , d3.max(data,function(d){ return d.index; }) ]);
      y.domain([ d3.min(data, function(d){ return d.signal; } )  , d3.max(data, function(d){ return d.signal; }) ]);

      var xAxis = d3.svg.axis()
          .scale(x)
          .orient("bottom")
          .tickSize(-height);
      var yAxis = d3.svg.axis()
          .scale(y)
          .orient("left")
          .ticks(5)
          .tickSize(-width);

          var zoom = d3.behavior.zoom()
              .x(x)
              .xExtent([0,d3.max(data,function(d){ return d.index; })]) // this tells how much the x-axis can go at most
              .scaleExtent([1, 1000]) // this tells the scale how deep should it go (for example [1,100] only goes until nearest unit)
              .on("zoom", zoomed)
              .scale(d3.max(data,function(d){ return d.index; }) /100 ,1);

          var svg = d3.select("body").append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
            .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
              .call(zoom);

          svg.append("rect")
              .attr("width", width)
              .attr("height", height)
              .attr("class","boundry-graph");
          svg.append("g")
              .attr("class", "x axis")
              .attr("transform", "translate(0," + height+ ")")
              .call(xAxis);
          svg.append("g")
              .attr("class", "y axis")
              .call(yAxis);

          // Add axis labels
          svg.append("text")
             .attr("transform","translate(" + width/2 + ", " + (height+10) + ")")
             .attr("dy","1em")
             .style("text-anchor","middle")
             .style("font-size","20px")
             .text("Events");

          svg.append("text")
             .attr("transform", "rotate(-90) translate(" + 0 + "," + (margin.left-20) + ")")
             .attr("y", 0 - margin.left)
             .attr("x",0 - (height / 2))
             .style("font-size","20px")
             .style("text-anchor", "middle")
             .text("Signal Value, pA");


          function zoomed() {
            svg.select(".x.axis").call(xAxis);
            svg.select(".y.axis").call(yAxis);
            svg.selectAll(".dot")
               .attr("cx", function(d){ return x(d.index); })
               .attr("cy", function(d){ return y(d.signal); });

            svg.selectAll(".squiggle")
               .attr("d", lineFunction(data));
          }

          var div = d3.select("body").append("div")
                    .attr("class", "tooltip")
                    .style("opacity", 0);


          svg.append("svg").attr("width",width).attr("height",height).selectAll("circle")
             .data(data)
             .enter()
             .append("circle")
              .attr("cx", function(d){ return x(d.index);})
              .attr("cy", function(d){ return y(d.signal);})
              .attr("class","dot")
              .attr("r",5)
              .on("mouseover", function(d){
                  div.transition()
                     .duration(200)
                     .style("opacity", 0.9)
                     .style("text-align","left");
                     //index,signal,time,model,length,stdv
                  div.html(
                    "<b>Event #:</b> " + (d.index-1) + "<br />" +
                    "<b>Signal:</b> " + d.signal + "<br />" +
                    "<b>Time:</b> " + d.time + "<br />" +
                    "<b>Model:</b> " + d.model + "<br />" +
                    "<b>Length:</b> " + d.length + "<br />" +
                    "<b>Std. Dev:</b>" + d.stdv + "<br/>"
                  )
                   .style("left", (d3.event.pageX) + "px")
                   .style("top", (d3.event.pageY - 28) + "px");
              })
              .on("mouseout", function(d) {
                div.transition()
                .duration(500)
                .style("opacity", 0);
              });


          var lineFunction = d3.svg.line()
            .x(function(d) { return x(d.index); })
            .y(function(d) { return y(d.signal); })
            .interpolate('linear');

          var lineGraph = svg.append("svg").attr("width",width).attr("height",height).append("path")
            .attr("d", lineFunction(data))
            .attr("class","squiggle")
            .attr("stroke", "blue")
            .attr("stroke-width", 2)
            .attr("fill", "none");



  });
  })();

  </script>
</body>
</html>
