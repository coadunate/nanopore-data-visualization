<!DOCTYPE html>
<html>
  <meta charset="utf-8">
  <head>
    <title>NDV - Nanopore Data Visualizer</title>
    <link rel="stylesheet" type="text/css" href="/css/main.css">
    <script src="https://d3js.org/d3.v4.min.js"></script>
  </head>
  <body>
      <script type="text/javascript">

      var
          margin = {top: 30, right: 50, bottom: 90, left: 50},
          margin2 = {top: 530, right: 20, bottom: 40, left: 40},
          width = (window.innerWidth) - margin.left - margin.right-20, // width = 900
          height = window.innerHeight - margin.top - margin.bottom, // height = 370
          height2 = window.innerHeight - margin2.top - margin2.bottom; // height2 = 40

      var svg = d3.select("body").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom + 100);


      var x = d3.scaleLinear().range([0, width]),
          x2 = d3.scaleLinear().range([0, width]),
          y = d3.scaleLinear().range([height, 0]),
          y2 = d3.scaleLinear().range([height2, 0]);



      var lineFunction = d3.line()
          .x(function(d) { return x(d.index); })
          .y(function(d) { return y(d.signal); })

      var lineFunction2 = d3.line()
          .x(function(d) { return x2(d.index); })
          .y(function(d) { return y2(d.signal); })


      var context = svg.append("g")
          .attr("class", "context")
          .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

      d3.csv("/data/part_data.csv", type, function(error, data) {
        if (error) throw error;

        x.domain([ d3.min(data, function(d){ return d.index; }) , d3.max(data,function(d){ return d.index; }) ]);
        y.domain([ d3.min(data, function(d){ return d.signal; }), d3.max(data, function(d){ return d.signal; }) ]);
        x2.domain(x.domain());
        y2.domain(y.domain());


        var brush = d3.brushX()
            .extent([[0, 0], [width, height2]])
            .on("brush end", brushed);

        var zoom = d3.zoom()
            .scaleExtent([1, 1000])
            .translateExtent([[0, 0], [width, height]])
            .extent([[0, 0], [width, height]])
            .on("zoom", zoomed);


        var xAxis = d3.axisBottom(x).tickSize(-height),
            xAxis2 = d3.axisBottom(x2),
            yAxis = d3.axisLeft(y).ticks(5).tickSize(-width);

        var focus = svg.append("g")
            .attr("class", "focus")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .call(zoom);


        focus.append("g")
            .attr("class", "axis axis--x")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

        focus.append("g")
            .attr("class", "axis axis--y")
            .call(yAxis);

        var div = d3.select("body").append("div")
                  .attr("class", "tooltip")
                  .style("opacity", 0);

        focus.append("svg").attr("width",width).attr("height",height).selectAll("circle")
           .data(data)
           .enter()
           .append("circle")
            .on("click",function(d){ console.log("Yo!"); })
            .attr("cx", function(d){ return x(d.index);})
            .attr("cy", function(d){ return y(d.signal);})
            .attr("class","dot")
            .attr("r",5)
            .on("mouseover", function(d){
                div.transition()
                   .duration(200)
                   .style("opacity", 0.9)
                   .style("text-align","left");
                   //index,signal,time,model,length,stdv
                div.html(
                  "<b>Event #:</b> " + (d.index-1) + "<br />" +
                  "<b>Signal:</b> " + d.signal + "<br />" +
                  "<b>Time:</b> " + d.time + "<br />" +
                  "<b>Model:</b> " + d.model + "<br />" +
                  "<b>Length:</b> " + d.length + "<br />" +
                  "<b>Std. Dev:</b>" + d.stdv + "<br/>"
                )
                 .style("left", (d3.event.pageX) + "px")
                 .style("top", (d3.event.pageY - 8) + "px");
            })
            .on("mouseout", function(d) {
              div.transition()
              .duration(500)
              .style("opacity", 0);
            });

        focus.append("svg").attr("width",width).attr("height",height).append("path")
            .datum(data)
            .attr("class", "squiggle")
            .attr("d", lineFunction)
            .attr("stroke","blue")
            .attr("stroke-width",2)
            .attr("fill","none");

        context.append("path")
            .datum(data)
            .attr("class", "squiggle")
            .attr("d", lineFunction2)
            .attr("stroke","blue")
            .attr("stroke-width",2)
            .attr("fill","none");

        context.append("g")
            .attr("class", "axis axis--x")
            .attr("transform", "translate(0," + height2 + ")")
            .call(xAxis2);

        context.append("g")
            .attr("class", "brush")
            .call(brush)
            .call(brush.move, x.range());

        // zoom.scaleTo(svg,d3.max(data,function(d){ return d.index; }) /100 ,1);

        // focus.append("rect")
        //     .attr("class", "zoom")
        //     .attr("width", width)
        //     .attr("height", height)
        //     .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
        //     .call(zoom)


        function brushed() {
          if (d3.event.sourceEvent && d3.event.sourceEvent.type === "zoom") return; // ignore brush-by-zoom
          var s = d3.event.selection || x2.range();
          x.domain(s.map(x2.invert, x2));
          focus.select(".squiggle").attr("d", lineFunction);
          focus.select(".axis--x").call(xAxis);
          svg.select(".zoom").call(zoom.transform, d3.zoomIdentity
              .scale(width / (s[1] - s[0]))
              .translate(-s[0], 0));

          focus.selectAll("circle")
               .attr("cx", function(d){ return x(d.index); })
               .attr("cy", function(d){ return y(d.signal); });
        }

        function zoomed() {
          if (d3.event.sourceEvent && d3.event.sourceEvent.type === "brush") return; // ignore zoom-by-brush
          var t = d3.event.transform;
          x.domain(t.rescaleX(x2).domain());
          focus.select(".squiggle").attr("d", lineFunction);
          focus.select(".axis--x").call(xAxis);
          context.select(".brush").call(brush.move, x.range().map(t.invertX, t));

          svg.selectAll(".dot")
               .attr("cx", function(d){ return x(d.index); })
               .attr("cy", function(d){ return y(d.signal); });
        }
      });



      function type(d) {
        d.index = +d.index;
        d.signal = +d.signal;
        d.time = +d.time;
        d.length = +d.length;
        d.stdv = +d.stdv;
        return d;
      }

      </script>
  </body>
</html>
